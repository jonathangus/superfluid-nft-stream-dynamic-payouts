/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SuperfluidErrors,
  SuperfluidErrorsInterface,
} from "../SuperfluidErrors";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_code",
        type: "uint256",
      },
    ],
    name: "ALREADY_EXISTS",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_code",
        type: "uint256",
      },
    ],
    name: "APP_RULE",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_code",
        type: "uint256",
      },
    ],
    name: "DOES_NOT_EXIST",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_code",
        type: "uint256",
      },
    ],
    name: "INSUFFICIENT_BALANCE",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_code",
        type: "uint256",
      },
    ],
    name: "MUST_BE_CONTRACT",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_code",
        type: "uint256",
      },
    ],
    name: "ONLY_HOST",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_code",
        type: "uint256",
      },
    ],
    name: "ONLY_LISTED_AGREEMENT",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_code",
        type: "uint256",
      },
    ],
    name: "ZERO_ADDRESS",
    type: "error",
  },
];

const _bytecode =
  "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122091429a3b47975db3734ae45dffee9a62f63c42f2a81f0f3ee427ad24d9a856bf64736f6c634300080e0033";

type SuperfluidErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SuperfluidErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SuperfluidErrors__factory extends ContractFactory {
  constructor(...args: SuperfluidErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SuperfluidErrors";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SuperfluidErrors> {
    return super.deploy(overrides || {}) as Promise<SuperfluidErrors>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SuperfluidErrors {
    return super.attach(address) as SuperfluidErrors;
  }
  connect(signer: Signer): SuperfluidErrors__factory {
    return super.connect(signer) as SuperfluidErrors__factory;
  }
  static readonly contractName: "SuperfluidErrors";
  public readonly contractName: "SuperfluidErrors";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SuperfluidErrorsInterface {
    return new utils.Interface(_abi) as SuperfluidErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SuperfluidErrors {
    return new Contract(address, _abi, signerOrProvider) as SuperfluidErrors;
  }
}
